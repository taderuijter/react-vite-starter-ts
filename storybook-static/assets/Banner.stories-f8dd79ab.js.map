{"version":3,"file":"Banner.stories-f8dd79ab.js","sources":["../../src/store/GlobalContext.tsx","../../src/store/LanguageContext.tsx","../../src/store/AppProvider.tsx","../../src/components/messages/Banner/Banner.tsx"],"sourcesContent":["import React, { createContext, Dispatch, useReducer } from \"react\";\n\n// Define the state shape\ntype GlobalState = {\n  banner: boolean;\n  cookies: boolean;\n  brandName: string;\n  brandImage: string;\n};\n\ntype GlobalProviderProps = {\n  children: React.ReactNode;\n};\n\n// Define the actions shape\ntype GlobalAction =\n  | { type: \"TOGGLE_BANNER\"; payload: boolean }\n  | { type: \"TOGGLE_COOKIES\"; payload: boolean };\n\n// Create the context\nexport const GlobalContext = createContext<{\n  state: GlobalState;\n  dispatch: Dispatch<GlobalAction>;\n}>({\n  state: {\n    banner: true,\n    cookies: true,\n    brandName: \"React Boilerplate\",\n    brandImage: \"\",\n  },\n  dispatch: () => {\n    throw new Error(\n      \"Dispatch function must be initialized within GlobalProvider\",\n    );\n  },\n});\n\n// Define the reducer\nconst globalReducer = (state: GlobalState, action: GlobalAction) => {\n  switch (action.type) {\n    case \"TOGGLE_BANNER\":\n      return { ...state, banner: action.payload };\n    case \"TOGGLE_COOKIES\":\n      return { ...state, cookies: action.payload };\n    default:\n      throw new Error(`Unknown action type: ${action}`);\n  }\n};\n\n// Create the GlobalProvider component\nexport const GlobalProvider: React.FC<GlobalProviderProps> = ({ children }) => {\n  const initialState: GlobalState = {\n    banner: true,\n    cookies: true,\n    brandName: \"React Boilerplate\",\n    brandImage: \"\",\n  };\n\n  const [state, dispatch] = useReducer(globalReducer, initialState);\n\n  return (\n    <GlobalContext.Provider value={{ state, dispatch }}>\n      {children}\n    </GlobalContext.Provider>\n  );\n};\n","import { createContext, FC } from \"react\";\n\ntype Language = {\n  label: string;\n  value: string;\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst initialState: Language[] = [\n  { label: \"English\", value: \"en\" },\n  { label: \"Nederlands\", value: \"nl\" },\n];\n\nexport const LanguageContext = createContext<Language[]>(initialState);\n\nexport const LanguageProvider: FC<Props> = ({ children }) => (\n  <LanguageContext.Provider value={initialState}>\n    {children}\n  </LanguageContext.Provider>\n);\n","import React from \"react\";\nimport { GlobalProvider } from \"store/GlobalContext\";\nimport { LanguageProvider } from \"store/LanguageContext\";\n\ntype AppProviderProps = {\n  children: React.ReactNode;\n};\n\nconst AppProvider: React.FC<AppProviderProps> = ({ children }) => (\n  <GlobalProvider>\n    <LanguageProvider>{children}</LanguageProvider>\n  </GlobalProvider>\n);\n\nexport default AppProvider;\n","import { XMarkIcon } from \"@heroicons/react/20/solid\";\n\n// Set types for props\nexport interface BannerProps {\n  children: React.ReactNode;\n  toggle: boolean;\n  handleToggle: (value: boolean) => void;\n}\n\nexport const Banner = ({ children, toggle, handleToggle }: BannerProps) => {\n  const handleClose = () => {\n    handleToggle(!toggle);\n  };\n\n  return (\n    <>\n      {toggle && (\n        <div className=\"flex items-center gap-x-6 bg-slate-900 py-2.5 px-6 sm:px-3.5 sm:before:flex-1\">\n          <p className=\"text-sm leading-6 text-white\">{children}</p>\n          <div className=\"flex flex-1 justify-end\">\n            <button\n              onClick={handleClose}\n              type=\"button\"\n              className=\"-m-3 p-3 focus-visible:outline-offset-[-4px]\">\n              <span className=\"sr-only\">Dismiss</span>\n              <XMarkIcon className=\"h-5 w-5 text-white\" aria-hidden=\"true\" />\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n"],"names":["GlobalContext","createContext","globalReducer","state","action","GlobalProvider","children","initialState","dispatch","useReducer","jsx","LanguageContext","LanguageProvider","AppProvider","Banner","toggle","handleToggle","handleClose","Fragment","jsxs","XMarkIcon"],"mappings":"6OAoBO,MAAAA,EAAAC,EAAAA,cAAA,CAGJ,MAAA,CACM,OAAA,GACG,QAAA,GACC,UAAA,oBACE,WAAA,EACC,EACd,SAAA,IAAA,CAEE,MAAA,IAAA,MAAU,6DACR,CACF,CAEJ,CAAA,EAGAC,EAAA,CAAAC,EAAAC,IAAA,CACE,OAAAA,EAAA,KAAA,CAAqB,IAAA,gBAEjB,MAAA,CAAA,GAAAD,EAAA,OAAAC,EAAA,OAAA,EAA0C,IAAA,iBAE1C,MAAA,CAAA,GAAAD,EAAA,QAAAC,EAAA,OAAA,EAA2C,QAE3C,MAAA,IAAA,MAAA,wBAAAA,CAAA,EAAA,CAAgD,CAEtD,EAGOC,EAAA,CAAA,CAAA,SAAAC,KAAA,CACL,MAAAC,EAAA,CAAkC,OAAA,GACxB,QAAA,GACC,UAAA,oBACE,WAAA,EACC,EAGd,CAAAJ,EAAAK,CAAA,EAAAC,EAAAA,WAAAP,EAAAK,CAAA,EAEA,OAAAG,EAAA,IAAAV,EAAA,SAAA,CAAA,MAAA,CAAA,MAAAG,EAAA,SAAAK,CAAA,EAAA,SAAAF,CAAA,CAAA,CAKF,kHCtDA,MAAAC,EAAA,CAAiC,CAAA,MAAA,UAAA,MAAA,IAAA,EACC,CAAA,MAAA,aAAA,MAAA,IAAA,CAElC,EAEOI,EAAAV,EAAAA,cAAAM,CAAA,EAEAK,EAAA,CAAA,CAAA,SAAAN,CAAA,IAAAI,MAAAC,EAAA,SAAA,CAAA,MAAAJ,EAAA,SAAAD,CAAA,CAAA,sHCVP,MAAAO,EAAA,CAAA,CAAA,SAAAP,KAAAI,EAAAA,IAAAL,EAAA,CAAA,SAAAK,EAAAA,IAAAE,EAAA,CAAA,SAAAN,CAAA,CAAA,CAAA,CAAA,4GCCO,MAAAQ,EAAA,CAAA,CAAA,SAAAR,EAAA,OAAAS,EAAA,aAAAC,CAAA,IAAA,CACL,MAAAC,EAAA,IAAA,CACED,EAAA,CAAAD,CAAA,CAAoB,EAGtB,OAAAL,MAAAQ,EAAAA,SAAA,CAAA,SAAAH,GAAAI,OAAA,MAAA,CAAA,UAAA,gFAAA,SAAA,CAIQT,EAAAA,IAAA,IAAA,CAAA,UAAA,+BAAA,SAAAJ,CAAA,CAAA,EAAsDI,EAAAA,IAAA,MAAA,CAAA,UAAA,0BAAA,SAAAS,EAAA,KAEpD,SAAC,CAAA,QAAAF,EACU,KAAA,SACJ,UAAA,+CACK,SAAA,CACVP,EAAA,IAAA,OAAA,CAAA,UAAA,UAAA,SAAA,UAAA,EAAiCA,EAAA,IAAAU,EAAA,CAAA,UAAA,qBAAA,cAAA,OAAA,CAC4B,CAAA,CAAA,EAAA,CAEjE,CAAA,CAAA,CAAA,CAAA,CAKV;;;;;;;;;;;;"}